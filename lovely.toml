[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.FUNCS.skip_booster = function(e)"
position = "after"
overwrite = false
payload = '''  G.GAME.boosters_skipped = (G.GAME.boosters_skipped or 0) + 1'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = "at"
overwrite = true
payload = '''if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/self.ability.odds_mult then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Runner' then loc_vars = {self.ability.extra.chips, self.ability.extra.chip_mod}"
position = "at"
overwrite = true
payload = '''elseif self.ability.name == 'Runner' then loc_vars = {self.ability.chips, self.ability.chip_mod, (self.ability.chips == 1 and "" or "s")}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.mult = self.ability.mult + self.ability.extra"
position = "before"
payload = '''self.ability.extra = self.ability.increase + 1'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Seance' then loc_vars = {localize(self.ability.extra.poker_hand, 'poker_hands')}"
position = "at"
payload = '''elseif self.ability.name == 'Square Joker' then loc_vars = {self.ability.x_mult, self.ability.current}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Square Joker' then loc_vars = {self.ability.extra.chips, self.ability.extra.chip_mod}"
position = "at"
payload = '''elseif self.ability.name == 'Square Joker' then loc_vars = {self.ability.chips, self.ability.chip_mod,self.ability.chips==1 and "" or "s"}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = "at"
overwrite = true
payload = '''if pseudorandom('lucky_money') < G.GAME.probabilities.normal/self.ability.odds_money then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.GAME.blind.triggered then "
position = "at"
overwrite = true
payload = '''if false then'''
match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/common_events.lua"
# pattern = "elseif _c.effect == 'Wild Card' then"
# position = "at"
# overwrite = true
# payload = '''elseif _c.effect == 'Wild Card' then --testing injection'''
# match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.effect == 'Lucky Card' then loc_vars = {G.GAME.probabilities.normal, _c.config.mult, 5, _c.config.p_dollars, 15}"
position = "at"
overwrite = true
payload = '''elseif _c.effect == 'Lucky Card' then loc_vars = {G.GAME.probabilities.normal, cfg.mult, cfg.odds_mult, cfg.p_dollars, cfg.odds_money}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "m_lucky =   {max = 500, order = 9, name = \"Lucky Card\", set = \"Enhanced\", pos = {x=4,y=1}, effect = \"Lucky Card\", label = \"Lucky Card\", config = {mult=20, p_dollars = 20}},"
position = "at"
overwrite = true
payload = '''m_lucky =   {max = 500, order = 9, name = "Lucky Card", set = "Enhanced", pos = {x=4,y=1}, effect = "Lucky Card", label = "Lucky Card", config = {mult=20, p_dollars = 20, odds_mult = 5, odds_money = 15}},'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = "if self.debuff then"
position = 'before'
payload = '''local old_level = G.GAME.hands[handname].level
local old_size = G.hand.config.card_limit'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.blind.triggered = true"
position = 'at'
payload = ''''''
match_indent = true

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''( *)G\.CONTROLLER:save_cardarea_focus\('hand'\)

( *)for k, v in ipairs\(G\.playing_cards\) do
'''
position = 'after'
payload = '''
    if (v.ability.forced_selection) then
        for k, v in pairs(find_joker("Matador")) do
            payout_small(v)
        end
    end
                        '''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "local four_fingers = next(find_joker('Four Fingers'))"
position = 'after'
payload = '''local superposition = next(find_joker('Superposition'))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "to:emplace(card, nil, stay_flipped)"
position = 'before'
payload = '''card.flipped_by_blind = stay_flipped'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "card_eval_status_text(scoring_hand[i], 'debuff')"
position = 'after'
payload = '''for k, v in pairs(find_joker("Matador")) do
    payout_small(v)
end
G.GAME.blind.triggered = false'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if any_selected then G.FUNCS.discard_cards_from_highlighted(nil, true) end'''
position = 'after'
payload = '''for k, v in pairs(find_joker("Matador")) do
    payout_big(v)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''ease_dollars(-G.GAME.dollars, true)'''
position = 'after'
payload = '''for k, v in pairs(find_joker("Matador")) do
    payout_big(v)
end'''
match_indent = true


# [[patches]]
# [patches.pattern]
# target = 'blind.lua'
# pattern = '''return math.max(math.floor(mult*0.5 + 0.5), 1), math.max(math.floor(hand_chips*0.5 + 0.5), 0), true'''
# position = 'before'
# payload = '''for k, v in pairs(find_joker("Matador")) do
#     payout_big(v)
# end'''
# match_indent = true


[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = "delay(0.23)"
position = 'after'
payload = '''for k, v in pairs(find_joker("Matador")) do
    payout_small(v,0.4)
end'''
match_indent = true

[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = '''(?<indent>[\t ]*)    card_eval_status_text\(G.hand.cards\[i\], 'extra', nil, percent, nil, effects\[ii\].extra\)\n *end'''
position = 'after'
payload = '''

                            if G.hand.cards[i].flipped_by_blind then
                                G.hand.cards[i].flipped_by_blind = nil
                            end'''
match_indent = true

# [[patches]]
# [patches.regex]
# target = 'blind.lua'
# pattern = '''(?<indent>[\t ]*)end\nend\n\nfunction Blind:drawn_to_hand()'''
# position = 'before'
# payload = """if self.triggered == true or old_level > G.GAME.hands[handname].level or old_size > G.hand.config.card_limit then
#     find_joker("Matador"):payout_big()
# end
# """
# match_indent = true